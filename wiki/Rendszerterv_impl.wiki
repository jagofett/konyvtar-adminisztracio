#summary A projekt rendszerterve az implementációs fázisban
#labels Featured

= Rendszerterv (implementációs fázis) =


== A rendszer felépítése ==

A program 9 osztályból áll, ezek részletezése:

 * A program funkcióinak elérése a _Menu_ osztályon keresztül történik. A főmenüből lehet elérni a főbb funkciókat, valamint ezek használatával almenükben történik a további funkciók elérése

 * A _Menu_ osztály létrehozásakor, annak konstruktora tölti be az adatokat a memóriába a megfelelő fájlokból. (Ezek részletezése lentebb) Az adatok egy-egy vektorba kerülnek beolvasásra, a fájlok sértetlensége esetén erről a _LoadData()_ metódus gondoskodik

 * A Menu főbb pontjai, és leírásai 
   * LoadData: az adatok beolvasása a fájlokból
   * SaveData: az összes memóriában tárolt adat kimentése
   * Login: a könyvtáros beléptetése, majd utána a főmenü megjelenítése
   * SearchBook: a keresést végző almenüt meghívó metódus
   * ManageBook: a könyvek kezelését végző almenüt meghívó metódus
   * ManageMember: a tagok kezelését végző almenüt meghívó metódus
   * Loan: kölcsönzési folyamat elindítása
   * Return: visszavételi folyamat elindítása
   * MemberId/BookId: segédfüggvény, a felhasználótól bekér egy azonosítót, majd megkeresi az ehhez tartozó tagot/könyvet, ha nem létezik, hamis értékkel tér vissza, ha létezik igazzal
   * GetInteger: ellenőrzött egész szám beolvasás a konzolról

 * A keresés almenüben nyílik lehetőség a könyvek közötti keresésre szerző, cím, azonosító, vagy ISBN szám szerint.
 * A könyv-kezelés almenüben nyílik lehetőség új könyv felvételére, könyvek listázására, illetve törlésére.
 * A tag-kezelés almenüben nyílik lehetőség új tag felvételére, tagok listázására, adott tag adatainak megtekintésére illetve szerkesztésére, ezenkívül tagok törlésére.
 * A kölcsönzés/visszavétel-almenüben lehetőség nyílik egy könyv kölcsönzésére/visszavételére adott tag által



 * A program a könyvek adatait a _Books_ osztályban, a tagok adatait a _Members_ osztályban tárolja
 * A különböző tagtípusok a _Members_ osztályból vannak származtatva, ezen osztályok: _Student_, _Prof_, _Oth_citizen_, és _Others_. (Amik megfelelnek (sorrendben): Egyetem hallgatói, egyetem tanárai, más egyetem polgára, és végül egyéb személy)
 * A _Members_ osztály gyerekei tehát a tagtípusokat jelölik, ezekben az osztályokban valójában csak a konstruktoruk és a _DateWhen_ metódusuk tér el. Hiszen a konstruktor beállítja a megfelelő kölcsönzésszámot, addig a _DateWhen_ megadja, hogy egy adott könyvet mikor kell visszahozni. A kölcsönzést és visszavételt tehtát a _Member_ osztály metódusai végzik.


 * Az _Admin_ osztály végzi a felhasználó bejelentkeztetését, konstruktora betölti a megfelelő állományból az azonosító adatokat, majd a _Login_ metódust meghívva, megkezdődik a bejelentkeztetés.

 * A _MyDate_ osztály feladata a kölcsönzés és visszahozás dátumának számolása. Működésének alapja, hogy a dátumot napokra visszaszámolja, majd a különböző műveleteket így végzi el, végül a napokat visszaalakítja dátum formára. A _Menu_ osztály Loan metódusa illetve a _Members_ osztály Return metódusa használja.

http://konyvtar-adminisztracio.googlecode.com/svn/branches/Library1.png
_<p align="center">A működést bemutató osztálydiagram</p>_

<br>

=== Dinamikus tervezés: ===


 * A program futása során a menü hajtja végre a tényleges tevékenységeket a különböző metódusok (menüpontok) futtatásával
 * Mivel a metódusok futtatása jellemzi a program különböző állapotait, így az állapotokat a tevékenységekhez kötjük
 * Megjegyzés: a menüfuttatás előtt a program betölti, valamit a program terminálás előtt kimenti az adatokat, ezt külön nem részletezzük
 * Megjegyzés: a menü megjelenése előtt a felhasználónak be kell jelentkeznie, ha helyesen írta be az adatait, akkor jelenik meg a menü, különben 3 lehetősége van újra próbálkozni mielőtt a program kilép.


http://konyvtar-adminisztracio.googlecode.com/svn/branches/Allapot.png
_<p align="center">A menü lehetséges állapotváltozásai</p>_

<br>

 A program indítása után a metódusok a következőképp követhetik egymást.
  * A program indítása után bekérjük a felhasználó nevét és jelszavát, ha sikeres a belépés, betöltjük a memóriába az adatokat. Sikertelen belépés esetén 3-szor újra lehet próbálkozni, majd a program kilép.
  * Ha sikeres volt a bejelentkezés, és az adatok betöltése megtörtént, akkor megjelenik a menü.
  * Ha még nincs könyv, vagy újat kívánunk létrehozni, akkor a ManageBooks(new) paranccsal ezt megtehetjük
  * Hasonlóan ez a tagokra is igaz
  * Ezek után lehetőség van kölcsönzésre (Loan()), és könyv visszavételére (Return()) (kölcsönzésnél vizsgáljuk hogy a tagnak van e még lehetősége)
  * Ekkor van lehetőség a törlésre is

http://konyvtar-adminisztracio.googlecode.com/svn/branches/szekvencia.png
_<p align="center">A program szekvencia diagramja</p>_


<br>

=== A program kommunikációs csatornái ===

A program az adatkezeléshez három fájlt használ, ezek legyenek a következők: _konyvtaros.dat_, _konyvek.dat_ és _tagok.dat_
Ezek felépítése a következő:

A könyvtárosok adatait tartalmazó fájl
<u>*konyvtaros.dat*</u> felépítése:
<pre>
<név>;<jelszó>
...
</pre>

A könyvek adatait tartalmazó fájl
<u>*konyvek.dat*</u> felépítése:
<pre>
<id>;<szerző>;<cím>;<kiadó>;<kiadási évszám>;<kiadás száma>;<isbn>
...
</pre>

A tagokat tartalmazó fájl
<u>*tagok.dat*</u> felépítése:
<pre>
<tipus>;<nev>;<lakcim>;<elerhetoseg>;<kölcsönzések száma>;<kivett könyv 1>;<könyv 1 kivételi dátuma>; ... ;<kivett könyv N>;<könyv N kivételi dátuma>
...
</pre>

=== A program tesztesetei ===

A helyes működés biztosítása érdekében a program számos tesztelésen átesett, ezek közül a legfontosabbak:

 * Üres fájlok - eredmény:
  * a pass.dat bejelentkezési adatokat tartalmazó fájl nem lehet üres, a program ekkor hibaüzenettel leáll. Ha csak a könyvek és tagok adatait tartalmazó fájlok üresek, a program helyesen működik.
 * Hibás fájlok - eredmény: 
  * a program hibaüzenettel leáll. A helyes futás csak hibátlan adatfájlok esetén garantált!
 * Bejelentkezés tesztelése
  * 3 sikertelen kísérlet után a program kilép
 * Menü funkcióinak tesztelése
  * a funkciók helyesen működnek, minden menüelem funkcióképes
 * Különböző tagtípusok tesztelése
  * minden tagtípus a neki elvárt módon működik, a vissza hozatal ideje helyesen kerül megállapításra, kölcsönözni csak a megengedett számú könyvet lehet
  * a tag részletes adatai megfelelően működik, tag szerkesztése szintén
 * Könyvek tesztelése
  * kölcsönzött könyv nem kölcsönözhető újra, a keresés működik
 * Kölcsönzés
  * csak ha van szabad könyv, akkor jeleníti meg őket, csak pontosa adatok esetén működik, biztosra megy (ellenőrző kérdések)
 * Visszavétel
  * megfelelően működik, a metódus csak akkor indul el, ha van egyáltalán kölcsönzött könyv, ha nincs erre figyelmeztet